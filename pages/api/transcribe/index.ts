import { ReadStream, createReadStream } from "fs";
import { NextApiRequest, NextApiResponse } from "next";
const { Configuration, OpenAIApi } = require("openai");

interface IChatCompletion {
    data: {
        id: string;
        object: string;
        created: number;
        choices: IChoice[];
        usage: {
            prompt_tokens: number;
            completion_tokens: number;
            total_tokens: number;
        };
    }
}

interface IChoice {
    index: number;
    message: {
        role: string;
        content: string;
    };
    finish_reason: string;
}

interface IChatCompletionRequest {
    /**
     * ID of the model to use for chat completions.
     */
    model: "gpt-4" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0613" | "gpt-3.5-turbo" | "gpt-3.5-turbo-0613" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-16k-0613",

    /**
     * A list of message objects.
     */
    messages: IMessage[],

    /**
     * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
     * 
     * Alter either this or top_p but not both.
     */
    temperature?: number,

    /**
     * What sampling top_p to use, between 0 and 1. 1 means only the most likely word is allowed, which can lead to repetitive text, while lower values like 0.8 will make the output more creative by allowing for more diversity in word choice.
     * 
     * Alter either this or temperature but not both.
     */
    top_p?: number,

    /**
     * How many completions to generate for each prompt.
     */
    n?: number,

    /**
     * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.
     */
    stream?: boolean,

    /**
     * Up to 4 sequences where the API will stop generating further tokens.
     */
    stop?: string | Array<string>,

    /**
     * The maximum number of tokens to generate in the chat completion.
     * 
     * The total length of input tokens and generated tokens is limited by the model's context length. 
     */
    max_tokens?: number,

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
     */
    presence_penalty?: number,

    /**
     * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
     */
    frequency_penalty?: number,

    /**
     * Modify the likelihood of specified tokens appearing in the completion.
     * 
     * Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
     */
    logit_bias?: { [key: string]: number },

    /**
     * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
     */
    user?: string,
}

/**
 * A list of messages comprising the conversation so far.
 */
interface IMessage {
    role: 'system' | 'user' | 'assistant' | 'function',

    /**
     * The contents of the message. content is required for all messages except assistant messages with function calls.
     */
    content?: string,

    /**
     * The name of the author of this message. name is required if role is function, and it should be the name of the function whose response is in the content. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
     */
    name?: string,

    /**
     * The name and arguments of a function that should be called, as generated by the model.
     */
}

interface ITranscriptionRequest {
    /**
     * The audio file object (not file name) to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
     */
    file: ReadStream;

    /**
     * Currently only whisper-1 is supported.
     */
    model: 'whisper-1';

    /**
     * An optional text to guide the model's style or continue a previous audio segment. The prompt should match the audio language.
     */
    prompt?: string;

    /**
     * The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
     */
    response_format?: 'json' | 'text' | 'srt' | 'verbose_json' | 'vtt';

    /**
     * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use log probability to automatically increase the temperature until certain thresholds are hit.
     */
    temperature?: number;

    /**
     * The language of the input audio. Supplying the input language in ISO-639-1 format will improve accuracy and latency.
     */
    language?: string;
}

interface ITranscription {
    data: {
        text: string;
    }
}

interface IOpenAIApi {
    createChatCompletion(_request: IChatCompletionRequest): Promise<IChatCompletion>;
    createTranscription(
        _file: ReadStream,
        _model: string,
        _prompt?: string,
        _responseFormat?: string,
        _temperature?: number,
        _language?: string,
        _options?: any
    ): Promise<ITranscription>
}

export default async function Handler(
    req: NextApiRequest,
    res: NextApiResponse
) {
    // GET '/api/transcribe/'
    if (req.method === "GET") {
        const configuration = new Configuration({
            apiKey: process.env.OPENAI_API_KEY,
        });
        const openai: IOpenAIApi = new OpenAIApi(configuration);

        try {
            // Prepare the transcription request
            const transcriptionRequest: ITranscriptionRequest = {
                file: createReadStream("audio-3.mp3"),
                model: "whisper-1",
                language: 'en'
            };

            // Transcribe
            const transcription: ITranscription = await openai.createTranscription(transcriptionRequest.file, transcriptionRequest.model);

            // Summarize
            const summary: IChatCompletion = await openai.createChatCompletion({
                model: "gpt-3.5-turbo",
                messages: [
                    {
                        "role": "system",
                        "content": "Summarize the given text. Create bullet points where appropriate."
                    },
                    {
                        role: "user",
                        content: transcription.data.text
                    }
                ],
                temperature: 0.3,
            });

            const transcriptionAndSummary = {
                transcription: transcription.data.text,
                summary: summary.data.choices[0].message.content
            }

            return res.status(200).send(transcriptionAndSummary);
        } catch (error) {
            console.log(error)
            res.status(500).send("Something went wrong.")
        }
    }
}